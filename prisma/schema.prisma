// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

//bun i -D prisma
//bunx prisma init
//bunx prisma generate - Do this after creating a new model
//bunx prisma db push - to push to your database.
//bunx prisma migrate reset - to reset your databse.
//bunx prisma migrate dev --name init - to push to your database and save your database history
//bunx prisma studio - to view your data

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid()) 
  username String @unique
  email String @unique
  imageUrl String? @db.Text
  externalUserId String @unique
  bio String? @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  following Follow[] @relation("Following")
  followedBy Follow[] @relation("FollowedBy")

  blockers Block[] @relation("Blocker")
  blockedUsers Block[] @relation("BlockedUser")

  streams Stream?

  @@index([username])
  @@index([email])
  @@index([externalUserId])
}

model Follow {
  id String @id @default(cuid()) 
  followerId String
  followingId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  follower User @relation(name:"Following", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation(name:"FollowedBy" ,fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Block {
  id String @id @default(cuid()) 
  blockerId String
  blockedUserId String

  blocker User @relation(name:"Blocker", fields: [blockerId], references: [id], onDelete: Cascade)
  blockedUser User @relation(name:"BlockedUser", fields: [blockedUserId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedUserId])
  @@index([blockerId])
  @@index([blockedUserId])
}

model Stream {
  id String @id @default(cuid()) 
  userId String @unique
  name String
  thumbnailUrl String? @db.Text
  ingressId String? @unique
  serverUrl String? @db.Text
  streamKey String? @db.Text
  isLive Boolean @default(false)
  isChatEnabled Boolean @default(false)
  isChatDelayed Boolean @default(false)
  isChatFollowersOnly Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([ingressId])
}